{
  "hash": "0490752ea89e1cbb186b55984fa7f2cd",
  "result": {
    "markdown": "---\ntitle: \"Day 8\\t\\u22C6\\u22C6\"\ndate: \"2023-12-08\"\nexecute:\n  warning: false\n  message: false\n---\n\n\n\n\n# Puzzle\n\n<https://adventofcode.com/2023/day/8>\n\n# Solution\n\n## Preprocessing\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(Matrix)\nlibrary(igraph)\nlibrary(numbers)\ndirections0 <- readr::read_delim(\n  \"input.txt\", \n  delim = \" \",\n  n_max = 1,\n  col_names = FALSE\n) %>% \n  pull(X1) %>% \n  str_split(\"\") %>% \n  .[[1]]\ndirections <- case_when(\n  directions0 == \"L\"  ~ \"to_left\",\n  directions0 == \"R\" ~ \"to_right\"\n)\nedgelist <- readr::read_delim(\n  \"input.txt\", \n  delim = \" = \",\n  skip = 1,\n  col_names = FALSE\n) %>% \n  mutate(X3 = X2 %>% \n           str_remove_all(\"\\\\(|\\\\)\") %>% \n           str_split(\", \")\n  ) %>% \n  transmute(\n    from = X1,\n    to_left = X3 %>% map_chr(~.x[1]),\n    to_right = X3 %>% map_chr(~.x[2])\n  ) %>% \n  arrange(from)\nadj_list <- c(\"to_left\", \"to_right\") %>% \n  setNames(., .) %>% \n  map(~edgelist %>% \n        select(all_of(c('from', .x))) %>% \n        igraph::graph_from_data_frame(directed = TRUE) %>% \n        igraph::as_adjacency_matrix() \n  )\n```\n:::\n\n\n## Part One\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelper1_day8 <- function (pos, edgelist, end_node) {\n  this_node <- edgelist$from[which(pos == 1)]\n  counter <- 0\n  while (this_node != end_node) {\n    this_direction <- directions[(counter %% length(directions)) + 1]\n    pos <- (pos %*% adj_list[[this_direction]])[1,]\n    this_node <- edgelist$from[which(pos == 1)]\n    counter <- counter + 1\n  }\n  return(counter)\n}\ninit_node <- Matrix::Matrix(\n  data = c(1, rep(0, nrow(edgelist) - 1)),\n  nrow = 1\n) \nanswer1 <- init_node %>% \n  # GPUmatrix::gpu.matrix() %>% \n  helper1_day8(\n    edgelist = edgelist,\n    end_node = \"ZZZ\"\n  )\nanswer1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 20777\n```\n:::\n:::\n\n\n## Part Two\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelper2_day8 <- function (pos, edgelist, end_node, to_detect = NULL) {\n  this_node <- edgelist$from[which(pos == 1)]\n  counter <- 0\n  while (str_sub(this_node, 3L) != to_detect) {\n    this_direction <- directions[(counter %% length(directions)) + 1]\n    pos <- (pos %*% adj_list[[this_direction]])[1,]\n    this_node <- edgelist$from[which(pos == 1)]\n    counter <- counter + 1\n  }\n  return(counter)\n}\nanswer2 <- which(stringr::str_sub(edgelist$from, 3L) == \"A\") %>% \n  map_int(~Matrix::Matrix(\n    data = as.numeric(1:nrow(edgelist) == .x),\n    nrow = 1\n  ) %>% \n    helper2_day8(\n      edgelist = edgelist,\n      end_node = init_node,\n      to_detect = \"Z\"\n    )\n  ) %>% \n  numbers::mLCM()\nanswer2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 13289612809129\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}