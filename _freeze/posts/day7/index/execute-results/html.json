{
  "hash": "5f101271aa03f6a699a6bc5b7c804d74",
  "result": {
    "markdown": "---\ntitle: \"Day 7\\t\\u22C6\"\ndate: \"2023-12-07\"\nexecute:\n  warning: false\n  message: false\n---\n\n\n\n\n# Puzzle\n\n<https://adventofcode.com/2023/day/7>\n\n# Solution\n\n## Preprocessing\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecords <- readr::read_delim(\n  \"input.txt\", \n  delim = \" \", \n  col_names = FALSE\n)\nrecords2 <- records %>%\n  transmute(\n    hand_number = 1:n(),\n    cards = X1 %>% \n      stringr::str_split(\"\") %>% \n      map(as_tibble),\n    card_count = map(cards, ~count(.x, value)),\n    bid = X2\n  ) \nhelper1_day7 <- function (input_df, card_ordering) {\n  to_return <- left_join(\n    input_df %>% \n      unnest(cols = c(card_count)) %>% \n      summarise(\n        type = case_when(\n          any(n == 5) ~ \"five of a kind\",\n          any(n == 4) ~ \"four of a kind\",\n          any(n == 3) & any(n == 2) ~ \"full house\",\n          any(n == 3) ~ \"three of a kind\",\n          sum(n == 2) == 2 ~ \"two pairs\",\n          any(n == 2) ~ \"one pair\",\n          TRUE ~ \"high card\"\n        ),\n        .by = hand_number\n      ),\n    input_df %>% \n      select(hand_number, cards, bid), \n    by = \"hand_number\"\n  ) %>% \n    group_split(type) %>% \n    setNames(., map_chr(., \\(x) as.character(x$type[1]))) %>% \n    map_dfr(\\(outer_tbl, name) bind_cols(\n      select(outer_tbl, -cards),\n      outer_tbl$cards %>% \n        map_dfr(\\(inner_tbl) as_tibble(t(inner_tbl)))\n    )) %>% \n    mutate(\n      across(type, ~.x %>% factor(levels = c(\n        \"five of a kind\",\n        \"four of a kind\",\n        \"full house\",\n        \"three of a kind\",\n        \"two pairs\",\n        \"one pair\",\n        \"high card\"\n      ))),\n      across(c(V1, V2, V3, V4, V5), ~factor(.x, levels = card_ordering))\n    ) %>% \n    arrange(type, V1, V2, V3, V4, V5) %>% \n    mutate(rank = n():1, winnings = bid * rank) %>% \n    pull(winnings) %>% \n    sum()\n  return(to_return)\n}\n```\n:::\n\n\n## Part One\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanswer1 <- records2 %>% \n  helper1_day7(card_ordering = c(\"A\", \"K\", \"Q\", \"J\", \"T\", \"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\"))\nanswer1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 248179786\n```\n:::\n:::\n\n\n## Part Two\n\nI haven't solved this part yet!\n\n<!-- ```{r} -->\n<!-- helper2_day7 <- function (x) { -->\n<!--   max_loc <- case_when( -->\n<!--     all(x$n[x$value != \"J\"] == 1) ~ which(x$value != \"J\")[1], # If all non-jokers appear only once, then add jokers to count for first non-joker -->\n<!--     TRUE ~ which(x$n == max(x$n) & x$value != \"J\")[1] # otherwise, add jokers to the first element whose count is equal to the max and is not a joker -->\n<!--   ) -->\n<!--   to_return <- x %>%  -->\n<!--     mutate( -->\n<!--       pos = 1:n(), -->\n<!--       value = case_when( -->\n<!--         pos == max_loc | value == \"J\" ~ \"J\", -->\n<!--         TRUE ~ value -->\n<!--       ) -->\n<!--     ) %>% -->\n<!--     select(-pos) %>%  -->\n<!--     summarise(across(n, sum), .by = value) -->\n<!--   return(to_return) -->\n<!-- } -->\n<!-- answer2 <- records2 %>%  -->\n<!--   mutate(card_count = map(card_count, helper2_day7)) %>%  -->\n<!--   helper1_day7(card_ordering = c(\"A\", \"K\", \"Q\", \"T\", \"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"J\")) -->\n<!-- answer2 # 247863671 wrong -->\n<!-- ``` -->\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}